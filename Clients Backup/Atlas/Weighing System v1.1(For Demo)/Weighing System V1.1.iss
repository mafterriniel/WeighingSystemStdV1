; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{28402A64-AA94-4768-8608-48CCAE4425C7}
AppName=Weighing System V1.1
AppVersion=1.1
;AppVerName=Weighing System V1.1 1.1
AppPublisher=Terriniel Scales Inc.
DefaultDirName=c:\Weighing System V1.1
DisableDirPage=yes
DefaultGroupName=Weighing System V1.1
DisableProgramGroupPage=yes
OutputBaseFilename=Weighing System v1.1 Setup
Password=terriniel
Compression=lzma
SolidCompression=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
//Source: "{src}\CRRuntime_13_25_x86.msi"; DestDir: "{src}"; Flags: external; BeforeInstall: 
//Source: "{src}\CRRuntime_13_25_x64.msi"; DestDir: "{src}"; Flags: external; BeforeInstall: InstallMsi('CRRuntime_13_25_x64.msi');
//Source: "{src}\PL2303_Prolific_DriverInstaller_v1.11.0.zip"; DestDir: "{src}"; Flags: external; BeforeInstall: UnzipAndInstallExe('PL2303_Prolific_DriverInstaller_v1.11.0.zip','PL2303_Prolific_DriverInstaller_v1.11.0.exe');
Source: "Weighing System v1.1.exe"; DestDir: "{app}"; Flags: ignoreversion 
Source: "Weighing System v1.1.exe.config"; DestDir: "{app}"; Flags: ignoreversion 
Source: "c.txt"; DestDir: "{app}"; Flags: ignoreversion
Source: "sys.file"; DestDir: "{app}"; Flags: ignoreversion
Source: "Reports\*"; DestDir: "{app}\Reports"; Flags: ignoreversion recursesubdirs createallsubdirs    
Source: "Hyperterminal\*"; DestDir: "{app}\Reports"; Flags: ignoreversion recursesubdirs createallsubdirs      
Source: "PRINT_ERROR_FIX\*"; DestDir: "{app}\PRINT_ERROR_FIX"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "weightdev.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "MykeCtrlEx.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "SysDb.mdb"; DestDir: "{app}"; Flags: ignoreversion
Source: "TSI Standard Manual.pdf"; DestDir: "{app}"; Flags: ignoreversion
Source: "fonts\DS-DIGIT.TTF"; DestDir: "{fonts}"; FontInstall: "DS-DIGITAL BI"; Flags: onlyifdoesntexist uninsneveruninstall
Source: "fonts\DS-DIGII.TTF"; DestDir: "{fonts}"; FontInstall: "DS-DIGITAL ITALIC"; Flags: onlyifdoesntexist uninsneveruninstall
Source: "fonts\DS-DIGIB.TTF"; DestDir: "{fonts}"; FontInstall: "DS-DIGITAL BOLD"; Flags: onlyifdoesntexist uninsneveruninstall
Source: "fonts\SaxMono.TTF"; DestDir: "{fonts}"; FontInstall: "DS-DIGITAL BOLD"; Flags: onlyifdoesntexist uninsneveruninstall

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\Weighing System V1.1"; Filename: "{app}\Weighing System v1.1.exe"
Name: "{commondesktop}\Weighing System V1.1"; Filename: "{app}\Weighing System v1.1.exe"; Tasks: desktopicon

[Run]
Filename: "{app}\Weighing System v1.1.exe"; Description: "{cm:LaunchProgram,Weighing System V1.1}"; Flags: nowait postinstall skipifsilent

[Code]
//const CrystalReportsKey = 'SOFTWARE\SAP BusinessObjects\Crystal Reports for .NET Framework 4.0\Crystal Reports';

procedure Unzip(ZipFile, TargetFldr: PAnsiChar);
var
  StatusText: string;
  ResultCode: Integer;
  shellobj: variant;
  ZipFileV, TargetFldrV: variant;
  SrcFldr, DestFldr: variant;
  shellfldritems: variant;
begin
  StatusText := WizardForm.StatusLabel.Caption;
    WizardForm.StatusLabel.Caption := 'Extracting ' + ExpandConstant(ZipFile) + '...';
    WizardForm.ProgressGauge.Style := npbstMarquee;
    try
    begin
      if FileExists(ExpandConstant(ZipFile)) then begin
        ForceDirectories(ExpandConstant(TargetFldr));
        shellobj := CreateOleObject('Shell.Application');
        ZipFileV := string(ExpandConstant(ZipFile));
        TargetFldrV := string(ExpandConstant(TargetFldr));
        SrcFldr := shellobj.NameSpace(ZipFileV);
        DestFldr := shellobj.NameSpace(TargetFldrV);
        shellfldritems := SrcFldr.Items;
        DestFldr.CopyHere(shellfldritems,272);  
      end;
    end
      finally
        WizardForm.StatusLabel.Caption := StatusText;
        WizardForm.ProgressGauge.Style := npbstNormal;
      end;
end;


procedure  InstallMsi(SourceDir: String;FName: String);
var
  StatusText: string;
  ResultCode: Integer;
begin
    StatusText := WizardForm.StatusLabel.Caption;
    WizardForm.StatusLabel.Caption := 'Installing ' + FName + '...';
    WizardForm.ProgressGauge.Style := npbstMarquee;
    try
    if not ShellExec('', 'msiexec.exe', ExpandConstant('/I "' + SourceDir + '\' + FName + '" /qb'),
  '', SW_SHOW, ewWaitUntilTerminated, ResultCode)then
    begin
      MsgBox(FName + 'installation failed with code: ' + IntToStr(ResultCode) + ' ',
        mbError, MB_OK);
      WizardForm.Close;       
    end;
    finally
      WizardForm.StatusLabel.Caption := StatusText;
      WizardForm.ProgressGauge.Style := npbstNormal;
    end;
end;

procedure  InstallExe( SourceDir: String;FName: String);
var
  StatusText: string;
  ResultCode: Integer;
begin
    StatusText := WizardForm.StatusLabel.Caption;
    WizardForm.StatusLabel.Caption := 'Installing ' + FName + '..';
    WizardForm.ProgressGauge.Style := npbstMarquee;

    try
    if not Exec(ExpandConstant(SourceDir + '\' + FName),'','',SW_SHOW,ewWaitUntilTerminated,ResultCode) then
    begin
      MsgBox(FName + ' installation failed with code: ' + IntToStr(ResultCode) + ' ',
        mbError, MB_OK);
      WizardForm.Close;       
    end;
    finally
      WizardForm.StatusLabel.Caption := StatusText;
      WizardForm.ProgressGauge.Style := npbstNormal;
    end;
end;

function InitializeSetup(): Boolean;
var
  StatusText: string;
  ResultCode: Integer;
begin
  //InstallMsi('CRRuntime_13_25_x86.msi'); 
  Result:= True;
   
end;

function PrepareToInstall(var NeedsRestart: Boolean): String;
var 
  USB2SerialDesc: String;
  LX310Desc: String;
  CRRuntimex86Desc: String;
  CRRuntimex64Desc: String;
begin


    Result := '';
end;


procedure CurStepChanged(CurStep: TSetupStep);
var 
  USB2SerialDesc: String;
  LX310Desc: String;
  CRRuntimex86Desc: String;
  CRRuntimex64Desc: String;
begin
   if (CurStep = ssPostInstall) then
   begin
               // INSTALL USB TO CRRuntime x86 DRIVER
    CRRuntimex86Desc:= 'CRRuntime_1325_x86';
    Unzip('{src}\Crystal Report\' + CRRuntimex86Desc + '.zip', '{src}\Crystal Report\' + CRRuntimex86Desc);
    InstallMsi('{src}\Crystal Report\' + CRRuntimex86Desc,CRRuntimex86Desc + '.msi');


    // INSTALL USB TO CRRuntime x64 DRIVER
    CRRuntimex64Desc:= 'CRRuntime_1325_x64';
    Unzip('{src}\Crystal Report\' + CRRuntimex64Desc + '.zip', '{src}\Crystal Report\' + CRRuntimex64Desc);
    InstallMsi('{src}\Crystal Report\' + CRRuntimex64Desc,CRRuntimex64Desc + '.msi'); 

    // INSTALL USB TO SERIAL DRIVER
    USB2SerialDesc:= 'DTECH-USBToSerial';
    Unzip('{src}\Drivers\' + USB2SerialDesc + '.zip', '{src}\Drivers\' + USB2SerialDesc);
    InstallExe('{src}\Drivers\' + USB2SerialDesc, 'PL2303_Prolific_DriverInstaller_v1.11.0.exe');
    

    // INSTALL LX310 DRIVER
    LX310Desc:= 'LX-310 Driver'
    Unzip('{src}\Drivers\' + LX310Desc + '.zip', '{src}\Drivers\' + LX310Desc);
    InstallExe('{src}\Drivers\' + LX310Desc, 'InstallNavi.exe');
   end;
end;

